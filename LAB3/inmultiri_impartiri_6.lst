     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; x+a/b + c*d - b/c +e; 
    14                                      ;    DL  stiva  AL
    15                                      ;a,b,d-byte; c-word; e-doubleword; x-qword
    16 00000000 04                          a DB 4
    17 00000001 02                          b DB 2
    18 00000002 0100                        c DW 1
    19 00000004 03                          d DB 3
    20 00000005 07000000                    e DD 7
    21 00000009 0A00000000000000            x DQ 10
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 B400                            MOV AH, 0
    27 00000002 A0[00000000]                    MOV AL, [a]
    28 00000007 F635[01000000]                  DIV byte[b] ;AL=a/b=4/2=2
    29 0000000D 88C3                            MOV BL, AL;
    30 0000000F B800000000                      MOV EAX, 0
    31 00000014 88D8                            MOV AL, BL
    32 00000016 BA00000000                      MOV EDX, 0
    33                                          
    34 0000001B 8B1D[09000000]                  MOV EBX, dword[x]
    35 00000021 8B0D[0D000000]                  MOV ECX, dword[x+4]
    36                                          
    37 00000027 01C3                            ADD EBX, EAX
    38 00000029 11D1                            ADC ECX, EDX ; ECX:EBX=x+a/b = 10+2=12
    39                                          
    40 0000002B A0[04000000]                    MOV AL, [d]
    41 00000030 66F725[02000000]                MUL word[c]; DX:AX=c*d=1*3=3
    42 00000037 6652                            push DX
    43 00000039 6650                            push AX
    44 0000003B 58                              pop EAX
    45                                          
    46 0000003C BA00000000                      MOV EDX, 0
    47 00000041 01C3                            ADD EBX, EAX
    48 00000043 11D1                            ADC ECX, EDX ; ECX:EBX=x+a/b+c*d=12+3=15
    49                                          
    50 00000045 B800000000                      MOV EAX, 0
    51 0000004A A0[01000000]                    MOV AL, [b]
    52 0000004F 66F735[02000000]                DIV word[c]; AX=b/c=2/1=2
    53 00000056 6689C2                          MOV DX, AX;
    54 00000059 B800000000                      MOV EAX, 0
    55 0000005E 6689D0                          MOV AX, DX
    56 00000061 BA00000000                      MOV EDX, 0
    57                                          
    58 00000066 29C3                            SUB EBX, EAX
    59 00000068 19D1                            SBB ECX, EDX ;ECX:EBX=x+a/b+c*d-b/c=15-2=13
    60                                          
    61 0000006A A1[05000000]                    MOV EAX, [e]
    62 0000006F 01C3                            ADD EBX, EAX
    63 00000071 11D1                            ADC ECX, EDX ;ECX:EBX=x+a/b + c*d - b/c +e=13+7=20
    64                                          
    65                                      
    66                                          ; exit(0)
    67 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
