     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                     ; x+a/b + c*d - b/c +e; 
    14                                      ;    DL  stiva  AL
    15                                      ;a,b,d-byte; c-word; e-doubleword; x-qword
    16 00000000 FC                          a DB -4
    17 00000001 02                          b DB 2
    18 00000002 FFFF                        c DW -1
    19 00000004 03                          d DB 3
    20 00000005 07000000                    e DD 7
    21 00000009 F6FFFFFFFFFFFFFF            x DQ -10
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 A0[00000000]                    MOV AL, [a]
    27 00000005 6698                            CBW
    28 00000007 F63D[01000000]                  IDIV byte[b] ;AL=a/b=-4/2=-2; corect
    29 0000000D 98                              CWDE
    30 0000000E 99                              CDQ
    31                                          
    32 0000000F 8B1D[09000000]                  MOV EBX, dword[x]
    33 00000015 8B0D[0D000000]                  MOV ECX, dword[x+4]
    34                                          
    35 0000001B 01C3                            ADD EBX, EAX
    36 0000001D 11D1                            ADC ECX, EDX ; ECX:EBX=x+a/b = -10+(-2)=-12 ;corect
    37                                          
    38 0000001F A0[04000000]                    MOV AL, [d]
    39 00000024 66F72D[02000000]                IMUL word[c]; DX:AX=c*d=-1*3=-3 ;corect
    40 0000002B 6652                            push DX
    41 0000002D 6650                            push AX
    42 0000002F 58                              pop EAX
    43                                          
    44 00000030 99                              CDQ
    45 00000031 01C3                            ADD EBX, EAX
    46 00000033 11D1                            ADC ECX, EDX ; ECX:EBX=x+a/b+c*d=-12+(-3)=-15
    47                                          
    48                                          
    49 00000035 A0[01000000]                    MOV AL, [b]
    50 0000003A 6698                            CBW
    51 0000003C 6699                            CWD
    52 0000003E 66F73D[02000000]                IDIV word[c]; AX=b/c=2/-1=-2 ;INTEGER OVERFLOW
    53 00000045 98                              CWDE
    54 00000046 99                              CDQ
    55                                          
    56 00000047 29C3                            SUB EBX, EAX
    57 00000049 19D1                            SBB ECX, EDX ;ECX:EBX=x+a/b+c*d-b/c=-15-(-2)=-13
    58                                          
    59 0000004B A1[05000000]                    MOV EAX, [e]
    60 00000050 99                              CDQ
    61 00000051 01C3                            ADD EBX, EAX
    62 00000053 11D1                            ADC ECX, EDX ;ECX:EBX=x+a/b + c*d - b/c +e=-13+7=-6
    63                                          
    64                                      
    65                                          ; exit(0)
    66 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
