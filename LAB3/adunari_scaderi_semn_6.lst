     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; c-(d+a)+(b+c)
    14                                      ;a - byte, b - word, c - double word, d - qword - Interpretare cu semn
    15 00000000 FD                          a DB -3
    16 00000001 0500                        b DW 5
    17 00000003 F9FFFFFF                    c DD -7
    18 00000007 0A00000000000000            d DQ 10
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A0[00000000]                    MOV AL, [a]
    24 00000005 6698                            CBW
    25 00000007 98                              CWDE
    26 00000008 99                              CDQ
    27                                          
    28 00000009 8B1D[07000000]                  MOV EBX, dword[d]
    29 0000000F 8B0D[0B000000]                  MOV ECX, dword[d+4]
    30                                          
    31 00000015 F8                              CLC
    32 00000016 01C3                            ADD EBX, EAX
    33 00000018 11D1                            ADC ECX, EDX  ; ECX:EBX = d+a = -3 + 7 = 4
    34                                          
    35 0000001A A1[03000000]                    MOV EAX, [c]
    36 0000001F 99                              CDQ
    37                                          
    38 00000020 F8                              CLC
    39 00000021 29D8                            SUB EAX, EBX
    40 00000023 19CA                            SBB EDX, ECX  ; EDX:EAX = c-(d+a) = -7-4 = -11
    41                                          
    42 00000025 89C3                            MOV EBX, EAX
    43 00000027 89D1                            MOV ECX, EDX
    44                                          
    45 00000029 66A1[01000000]                  MOV AX, [b]
    46 0000002F 98                              CWDE
    47 00000030 0305[03000000]                  ADD EAX, [c] ; EAX = b+c = 5-7 =-2
    48                                          
    49 00000036 BA00000000                      MOV EDX, 0
    50                                          
    51 0000003B F8                              CLC
    52 0000003C 01D8                            ADD EAX, EBX
    53 0000003E 11CA                            ADC EDX, ECX  ;EDX:EAX = c-(d+a)+(b+c) = -11 - 2 = -13
    54                                          
    55                                          ; exit(0)
    56 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
