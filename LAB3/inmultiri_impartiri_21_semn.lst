     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; (a*a/b+b*b)/(2+b)+e-x
    14                                      ; a-byte; b-word; e-doubleword; x-qword
    15 00000000 FC                          a DB -4
    16 00000001 0200                        b DW 2
    17 00000003 F6FFFFFF                    e DD -10
    18 00000007 0700000000000000            x DQ 7
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24                                          
    25 00000000 A0[00000000]                    MOV AL, [a]
    26 00000005 F62D[00000000]                  IMUL byte[a] ; AX=a*a=(-4)*(-4)=16
    27 0000000B 6699                            CWD
    28                                          
    29 0000000D 66F73D[01000000]                IDIV word[b] ; AL=a*a/b=16/2=8
    30 00000014 6698                            CBW
    31 00000016 98                              CWDE
    32 00000017 89C3                            MOV EBX, EAX
    33                                          
    34 00000019 66A1[01000000]                  MOV AX, [b]
    35 0000001F 66F72D[01000000]                IMUL word[b] ; DX:AX=b*b=2*2=4 ;
    36 00000026 6652                            push DX
    37 00000028 6650                            push AX
    38 0000002A 58                              pop EAX
    39                                          
    40 0000002B 01D8                            ADD EAX, EBX ;EAX=a*a/b+b*b=8+4=12
    41 0000002D 50                              push EAX
    42 0000002E 6658                            pop AX
    43 00000030 665A                            pop DX
    44                                          
    45 00000032 668B1D[01000000]                MOV BX, [b]
    46 00000039 6683C302                        ADD BX, 2    ;BX=2+b=2+2=4
    47                                          
    48 0000003D 66F7F3                          DIV BX ; AX=(a*a/b+b*b)/(2+b)=12/4=3  ; 
    49                                          
    50                                          
    51 00000040 98                              CWDE
    52 00000041 89C3                            MOV EBX, EAX
    53 00000043 031D[03000000]                  ADD EBX, [e] ; EBX=(a*a/b+b*b)/(2+b)+e=3-10=-7 ;
    54                                          
    55 00000049 89D8                            MOV EAX, EBX
    56 0000004B 99                              CDQ
    57 0000004C 89C3                            MOV EBX, EAX
    58 0000004E 89D1                            MOV ECX, EDX
    59 00000050 A1[07000000]                    MOV EAX, dword[x]
    60 00000055 8B15[0B000000]                  MOV EDX, dword[x+4]
    61                                          
    62 0000005B 29C3                            SUB EBX, EAX
    63 0000005D 19D1                            SBB ECX, EDX ; ECX:EBX=(a*a/b+b*b)/(2+b)+e-x=-7-7=-14
    64                                          
    65                                          
    66                                          ; exit(0)
    67 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
