     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; (c-a) + (b - d) +d
    14                                      
    15 00000000 03                          a DB 3
    16 00000001 0A00                        b DW 10
    17 00000003 07000000                    c DD 7
    18 00000007 0500000000000000            d DQ 5
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 B800000000                      MOV EAX, 0
    25 00000005 A0[00000000]                    MOV AL, [a]
    26 0000000A 2905[03000000]                  SUB [c], EAX ; 7-3=4
    27                                          
    28 00000010 BA00000000                      MOV EDX, 0
    29 00000015 66A1[01000000]                  MOV AX, [b]
    30 0000001B 8B1D[07000000]                  MOV EBX, dword[d]
    31 00000021 8B0D[0B000000]                  MOV ECX, dword[d+4]
    32                                          
    33 00000027 F8                              CLC
    34 00000028 29D8                            SUB EAX, EBX
    35 0000002A 19CA                            SBB EDX, ECX ;10-5=5
    36                                          
    37 0000002C F8                              CLC
    38 0000002D 8B1D[03000000]                  MOV EBX, [c]
    39 00000033 B900000000                      MOV ECX, 0
    40 00000038 01D8                            ADD EAX, EBX
    41 0000003A 11CA                            ADC EDX, ECX ; 4+5=9
    42                                          
    43 0000003C F8                              CLC
    44 0000003D 8B1D[07000000]                  MOV EBX, dword[d]
    45 00000043 8B0D[0B000000]                  MOV ECX, dword[d+4]
    46 00000049 01D8                            ADD EAX, EBX
    47 0000004B 11CA                            ADC EDX, ECX ; 9+5=14
    48                                         
    49                                          ; exit(0)
    50 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
