     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0B00                        a DW 11
    15 00000002 0800                        b DW 8
    16 00000004 0900                        c DW 9
    17 00000006 0A00                        d DW 10
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                      
    24 00000000 66A1[00000000]                  MOV AX, [a]
    25 00000006 662B05[04000000]                SUB AX, [c] ; AX=a-c     11-9=2
    26 0000000D 660305[06000000]                ADD AX, [d] ; AX=AX+d    2+10=12
    27 00000014 6683E807                        SUB AX, 7   ; AX=AX-7    12-7=5
    28 00000018 660305[02000000]                ADD AX, [b] ; AX=AX+b    5+8=13
    29                                          
    30 0000001F 8005[06000000]02                ADD byte[d], 2  ; d=d+2        10+2=12
    31 00000026 662B05[06000000]                SUB AX, [d] ; AX=AX-(2+d)  13-12=1
    32                                          
    33                                          ; exit(0)
    34 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    35 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
