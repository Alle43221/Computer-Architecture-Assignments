     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0204020502020404            sir DB 2, 4, 2, 5, 2, 2, 4, 4 
    14                                      len equ $-sir
    15                                      
    16 00000008 0000<rept>                  rez times len DW 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B908000000                      mov ecx, len ;contor loop
    23 00000005 BE[00000000]                    mov esi, sir
    24 0000000A BF[08000000]                    mov edi, rez
    25 0000000F BB00000000                      mov ebx, 0
    26                                          
    27 00000014 FC                              cld
    28 00000015 E32D                            JECXZ final
    29                                          repeta:
    30 00000017 AC                                  lodsb
    31 00000018 51                                  push ecx
    32 00000019 89D9                                mov ecx, ebx
    33 0000001B BF[08000000]                        mov edi, rez
    34                                              
    35 00000020 E30C                                JECXZ final_loop
    36                                              repeta1:
    37 00000022 668B17                                 mov dx, [edi]
    38 00000025 38C2                                   cmp dl, al
    39 00000027 7416                                   je incrementare
    40 00000029 83C702                                 ADD edi, 2
    41 0000002C E2F4                                loop repeta1
    42                                         
    43                                              final_loop:
    44 0000002E BF[08000000]                        mov edi, rez
    45 00000033 66C7045F0001                        mov word[edi+ebx*2], 0100h
    46 00000039 88045F                              mov [edi+ebx*2], al
    47 0000003C 43                                  inc ebx
    48 0000003D EB05                                jmp final
    49                                              
    50                                              incrementare:
    51 0000003F 6681070001                              add word[edi], 0100h
    52                                                  
    53                                              final:
    54 00000044 59                                      pop ecx
    55                                              
    56 00000045 E2D0                            loop repeta
    57                                          
    58                                          ; exit(0)
    59 00000047 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000049 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
