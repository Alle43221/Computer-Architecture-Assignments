     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 61626364                    input DB "abcd"
    14                                      len equ $-input
    15 00000004 61746372                    src DB "atcr"
    16 00000008 7A747972                    dst DB "ztyr"
    17 0000000C 00<rept>                    output times len DB 0
    18                                      ;Se da un sir de octeti 'input' si inca doua siruri de dimensiune N fiecare, 'src' si 'dst'. Sa se obtina un nou sir 'output' din sirul 'input' in care se vor inlocui toti octetii cu valoarea src[i] cu dst[i], u
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 BB00000000                      mov ebx, 0
    26 00000005 B904000000                      mov ecx, len ;contor loop
    27 0000000A BE[00000000]                    mov esi, input
    28 0000000F BF[0C000000]                    mov edi, output
    29 00000014 BA[08000000]                    mov edx, dst
    30                                          
    31 00000019 FC                              CLD
    32                                          repeta:
    33                                          
    34 0000001A AC                              LODSB
    35 0000001B 3A83[04000000]                  cmp al, [src+ebx]
    36 00000021 7405                            JE egalitate
    37                                          
    38 00000023 4E                              dec esi
    39 00000024 A4                              MOVSB
    40 00000025 42                              inc edx
    41 00000026 EB07                            JMP final
    42                                          
    43                                          egalitate:
    44 00000028 56                              push esi
    45 00000029 89D6                            mov esi, edx
    46 0000002B A4                              MOVSB
    47 0000002C 89F2                            mov edx, esi
    48 0000002E 5E                              pop esi
    49                                          
    50                                          final:
    51 0000002F 43                              inc ebx
    52                                          
    53 00000030 E2E8                            loop repeta
    54                                          
    55                                          ; exit(0)
    56 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
