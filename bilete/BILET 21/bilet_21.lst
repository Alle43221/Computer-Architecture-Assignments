     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, fopen, fclose, scanf, fread   
     8                                  import exit msvcrt.dll   
     9                                  import printf msvcrt.dll 
    10                                  import fopen msvcrt.dll   
    11                                  import fclose msvcrt.dll      
    12                                  import scanf msvcrt.dll     
    13                                  import fread msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 25730A00                    format db "%s", 10, 0
    19 00000004 257300                      format_citire db "%s", 0
    20 00000007 256400                      format_citire1 db "%d", 0
    21                                      
    22 0000000A 00<rept>                    nume_fisier times 10 db 0
    23 00000014 7200                        mod_acces db "r", 0
    24 00000016 00000000                    descriptor_fisier dd 0
    25 0000001A 00<rept>                    sir times 100 db 0 
    26 0000007E 00000000                    numar dd 0
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 68[7E000000]                    push numar
    32 00000005 68[07000000]                    push format_citire1
    33 0000000A FF15[00000000]                  call [scanf]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36 00000013 68[0A000000]                    push nume_fisier
    37 00000018 68[04000000]                    push format_citire
    38 0000001D FF15[00000000]                  call [scanf]
    39 00000023 83C408                          add esp, 4*2
    40                                          
    41                                          ;deschiderea fisierului
    42 00000026 68[14000000]                    push dword mod_acces
    43 0000002B 68[0A000000]                    push dword nume_fisier   ; deschidere input.txt cu mod acces r
    44 00000030 FF15[00000000]                  call [fopen]
    45 00000036 83C408                          add esp, 4*2
    46                                          
    47 00000039 A3[16000000]                    mov [descriptor_fisier], eax ; salvam descriptorul pt input.txt
    48                                          
    49 0000003E BF01000000                      mov edi, 1
    50 00000043 BE[1A000000]                    mov esi, sir
    51                                          bucla:
    52 00000048 FF35[16000000]                      push dword[descriptor_fisier]
    53 0000004E 6A01                                push dword 1
    54 00000050 6A01                                push dword 1
    55 00000052 56                                  push esi
    56 00000053 FF15[00000000]                      call [fread]
    57 00000059 83C410                              add esp, 4*4
    58                                              
    59 0000005C 83F800                              cmp eax, 0
    60 0000005F 7438                                je final1
    61                                              
    62 00000061 803E20                              cmp byte[esi], ' '
    63 00000064 7530                                jne final_bucla
    64                                              
    65 00000066 BA00000000                          mov edx, 0
    66 0000006B C60600                              mov byte[esi], 0
    67 0000006E 89F8                                mov eax, edi
    68 00000070 47                                  inc edi
    69 00000071 F735[7E000000]                      div dword[numar]
    70 00000077 83FA00                              cmp edx, 0
    71 0000007A BE[1A000000]                        mov esi, sir
    72 0000007F 75C7                                jne bucla
    73                                              
    74 00000081 68[1A000000]                        push sir
    75 00000086 68[00000000]                        push format
    76 0000008B FF15[00000000]                      call [printf]
    77 00000091 83C408                              add esp, 4*2
    78 00000094 EBB2                                jmp bucla
    79                                              
    80                                              final_bucla:
    81 00000096 46                                  inc esi
    82                                              
    83 00000097 EBAF                            jmp bucla
    84                                          
    85                                          final1:
    86 00000099 81FE[1A000000]                  cmp esi, sir
    87 0000009F 742E                            je final
    88                                          
    89 000000A1 BA00000000                      mov edx, 0
    90 000000A6 C60600                          mov byte[esi], 0
    91 000000A9 89F8                            mov eax, edi
    92 000000AB 47                              inc edi
    93 000000AC F735[7E000000]                  div dword[numar]
    94 000000B2 83FA00                          cmp edx, 0
    95 000000B5 BE[1A000000]                    mov esi, sir
    96 000000BA 7513                            jne final
    97                                          
    98 000000BC 68[1A000000]                    push sir
    99 000000C1 68[00000000]                    push format
   100 000000C6 FF15[00000000]                  call [printf]
   101 000000CC 83C408                          add esp, 4*2
   102                                          
   103                                          final:
   104                                          
   105 000000CF FF35[16000000]                  push dword[descriptor_fisier] ; inchidere fisier
   106 000000D5 FF15[00000000]                  call [fclose]
   107 000000DB 83C404                          add esp, 4
   108                                          
   109 000000DE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   110 000000E0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   111                                          
