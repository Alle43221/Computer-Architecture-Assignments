     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, scanf  
     8                                  import exit msvcrt.dll   
     9                                  import fprintf msvcrt.dll 
    10                                  import fopen msvcrt.dll   
    11                                  import fclose msvcrt.dll     
    12                                  import scanf msvcrt.dll      
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                  
    17 00000000 6F75747075742E7478-         nume_fisier db "output.txt", 0
    17 00000009 7400               
    18 0000000B 7700                        mod_acces db "w", 0
    19 0000000D 00000000                    descriptor_fisier dd 0
    20 00000011 25640A00                    format_scriere db "%d", 10, 0
    21 00000015 256300                      format_citire db "%c", 0
    22 00000018 00000000                    cate dd 0
    23 0000001C 00000000                    max dd 0
    24 00000020 FFFFFFFF                    min dd -1
    25 00000024 01000000                    rezultat dd 1
    26 00000028 00000000                    numar dd 0
    27                                      
    28 0000002C 00<rept>                    sir times 10 db 0
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ;deschiderea fisierului
    34 00000000 68[0B000000]                    push dword mod_acces
    35 00000005 68[00000000]                    push dword nume_fisier
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 A3[0D000000]                    mov [descriptor_fisier], eax ; salvam descriptorul
    40                                          
    41 00000018 BE[2C000000]                    mov esi, sir
    42                                          bucla:
    43 0000001D 56                                  push esi
    44 0000001E 68[15000000]                        push format_citire
    45 00000023 FF15[00000000]                      call [scanf]
    46 00000029 83C410                              add esp, 4*4
    47                                        
    48 0000002C 803E0A                              cmp byte[esi], 10
    49 0000002F 745A                                je final
    50                                              
    51 00000031 803E20                              cmp byte[esi], ' '
    52 00000034 7530                                jne mai_jos
    53                                              
    54 00000036 BE[2C000000]                        mov esi, sir
    55 0000003B A1[28000000]                        mov eax, [numar]
    56 00000040 C705[28000000]0000-                 mov dword[numar], 0
    56 00000048 0000               
    57 0000004A 3B05[1C000000]                      cmp eax, [max]
    58 00000050 7605                                jbe verif_minim
    59 00000052 A3[1C000000]                        mov [max], eax
    60                                              verif_minim:
    61 00000057 3B05[20000000]                      cmp eax, [min]
    62 0000005D 73BE                                jae bucla
    63 0000005F A3[20000000]                        mov [min], eax
    64 00000064 EBB7                                jmp bucla
    65                                              
    66                                              mai_jos:
    67 00000066 BA00000000                          mov edx, 0
    68 0000006B A1[28000000]                        mov eax, [numar]
    69 00000070 BB0A000000                          mov ebx, 10d
    70 00000075 F7E3                                mul ebx
    71 00000077 BB00000000                          mov ebx, 0
    72 0000007C 8A1E                                mov bl, [esi]
    73 0000007E 80EB30                              sub bl, '0'
    74 00000081 01D8                                add eax, ebx
    75 00000083 A3[28000000]                        mov [numar], eax
    76 00000088 46                                  inc esi
    77                                              
    78 00000089 EB92                            jmp bucla
    79                                              
    80                                          final:
    81                                          
    82 0000008B FF35[1C000000]                  push dword[max]
    83 00000091 68[11000000]                    push format_scriere
    84 00000096 FF35[0D000000]                  push dword[descriptor_fisier]
    85 0000009C FF15[00000000]                  call [fprintf]
    86 000000A2 83C40C                          add esp, 4*3
    87                                          
    88 000000A5 FF35[20000000]                  push dword[min]
    89 000000AB 68[11000000]                    push format_scriere
    90 000000B0 FF35[0D000000]                  push dword[descriptor_fisier]
    91 000000B6 FF15[00000000]                  call [fprintf]
    92 000000BC 83C40C                          add esp, 4*3
    93                                          
    94 000000BF FF35[0D000000]                  push dword[descriptor_fisier] ; inchidere fisier
    95 000000C5 FF15[00000000]                  call [fclose]
    96 000000CB 83C404                          add esp, 4
    97                                          
    98 000000CE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    99 000000D0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   100                                          
