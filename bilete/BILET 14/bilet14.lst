     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fread, printf, fopen, fclose
     8                                  import fread msvcrt.dll      
     9                                  import exit msvcrt.dll   
    10                                  import printf msvcrt.dll 
    11                                  import fopen msvcrt.dll   
    12                                  import fclose msvcrt.dll           
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                  
    17 00000000 70727566756E672E74-         nume_fisier db "prufung.txt", 0
    17 00000009 787400             
    18 0000000C 7200                        mod_acces db "r", 0
    19 0000000E 00000000                    descriptor_fisier dd 0
    20 00000012 25730A00                    format_scriere db "%s", 10, 0
    21 00000016 00000000                    cate dd 0
    22                                      
    23 0000001A 00<rept>                    sir times 200 db 0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ;deschiderea fisierului
    29 00000000 68[0C000000]                    push dword mod_acces
    30 00000005 68[00000000]                    push dword nume_fisier
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add esp, 4*2
    33                                          
    34 00000013 A3[0E000000]                    mov [descriptor_fisier], eax ; salvam descriptorul
    35                                          
    36 00000018 BE[1A000000]                    mov esi, sir
    37                                          bucla:
    38 0000001D FF35[0E000000]                      push dword [descriptor_fisier]
    39 00000023 6A01                                push dword 1
    40 00000025 6A01                                push dword 1
    41 00000027 56                                  push esi
    42 00000028 FF15[00000000]                      call [fread]
    43 0000002E 83C410                              add esp, 4*4
    44                                              
    45 00000031 83F800                              cmp eax, 0
    46 00000034 7458                                je final
    47                                              
    48 00000036 803E20                              cmp byte[esi], ' '
    49 00000039 7408                                je mai_jos
    50                                              
    51 0000003B 803E2E                              cmp byte[esi], '.'
    52 0000003E 7403                                je mai_jos
    53                                              
    54 00000040 46                                  inc esi
    55 00000041 EBDA                                jmp bucla
    56                                              
    57                                              mai_jos:
    58 00000043 89F3                                mov ebx, esi
    59 00000045 81EB[1A000000]                      sub ebx, sir
    60 0000004B 891D[16000000]                      mov [cate], ebx
    61 00000051 83E301                              and ebx, 01
    62 00000054 C60600                              mov byte[esi], 0
    63 00000057 BE[1A000000]                        mov esi, sir
    64 0000005C 74BF                                je bucla
    65                                              
    66 0000005E BA00000000                          mov edx, 0
    67 00000063 A1[16000000]                        mov eax, [cate]
    68 00000068 BB02000000                          mov ebx, 2
    69 0000006D F7F3                                div ebx
    70 0000006F BB[1A000000]                        mov ebx, sir
    71 00000074 01C3                                add ebx, eax
    72 00000076 C60320                              mov byte[ebx], ' '
    73                                              
    74 00000079 68[1A000000]                        push sir
    75 0000007E 68[12000000]                        push format_scriere
    76 00000083 FF15[00000000]                      call [printf]
    77 00000089 83C408                              add esp, 4*2
    78                                              
    79 0000008C EB8F                            jmp bucla
    80                                              
    81                                          final:
    82                                          
    83 0000008E FF35[0E000000]                  push dword[descriptor_fisier] ; inchidere fisier
    84 00000094 FF15[00000000]                  call [fclose]
    85 0000009A 83C404                          add esp, 4
    86                                          
    87 0000009D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 0000009F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    89                                          
